{"version":3,"sources":["smartystreets/autocomplete.js","pathname.js","components/AddressLookup.js","components/AddressConfirmation.js","components/AddressServiceElement.js","components/Dashboard.js","components/Home.js","auth/checkAuth.js","components/Login.js","components/Navigation.js","components/NotFound.js","components/Register.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["credentials","SmartyStreetsCore","SharedCredentials","client","buildClient","usAutocomplete","Lookup","pathName","AddressLookup","goToDashboard","submitForConfirmation","useState","street1","setStreet1","street2","setStreet2","city","setCity","state","setState","suggestions","setSuggestions","shouldSearch","setShouldSearch","useEffect","debouncedSearch","setTimeout","length","send","then","response","result","catch","err","console","log","clearTimeout","handleSubmit","e","preventDefault","axios","method","url","headers","data","street","secondary","lastLine","res","lookups","map","lookup","address","style","width","margin","onSubmit","TextField","label","required","fullWidth","value","onChange","target","List","listStyle","border","borderRadius","suggestion","index","ListItem","button","key","onClick","streetLine","text","marginBottom","Button","variant","marginRight","color","AddressConfirmation","goBack","apiEndpoint","addressID","userID","JSON","parse","sessionStorage","getItem","id","padding","Typography","component","deliveryLine1","components","AddressServiceElement","addressToBeConfirmed","setAddressToBeConfirmed","readyForConfirmation","setReadyForConfirmation","maxWidth","AddressList","setAddressID","loadEditForm","loadAddForm","addresses","setAddresses","fetchAddresses","get","list","display","gridTemplateColumns","delivery_line","last_line","Dashboard","props","mode","setMode","selectedAddress","setSelectedAddress","Home","textAlign","checkAuth","window","Login","history","email","setEmail","password","setPassword","to","setItem","stringify","push","align","type","Navigation","useHistory","AppBar","position","Toolbar","flexGrow","Link","clear","location","pathname","NotFound","Register","ProtectedRoute","Component","rest","render","Router","exact","path","App","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.06aaeae2.chunk.js","sourcesContent":["import { core as SmartyStreetsCore, usAutocomplete } from \"smartystreets-javascript-sdk\";\n\nconst websiteKey = \"22976561917208640\";\nconst hostname = 'addressit.herokuapp.com'\nconst credentials = new SmartyStreetsCore.SharedCredentials(websiteKey, hostname);\n\nexport const client = SmartyStreetsCore.buildClient.usAutocomplete(credentials);\n\nexport const Lookup = usAutocomplete.Lookup","export const pathName = 'https://addressit.herokuapp.com'\n\n// export const pathName = 'http://localhost:4000'","import React, { useState, useEffect } from 'react';\nimport { client, Lookup } from \"../smartystreets\";\nimport axios from \"axios\";\nimport { Button, TextField, ListItem, List } from \"@material-ui/core\";\nimport { pathName } from \"../pathname\";\n\nconst AddressLookup = ({ goToDashboard, submitForConfirmation }) => {\n  const [street1, setStreet1] = useState('')\n  const [street2, setStreet2] = useState('')\n  const [city, setCity] = useState('')\n  const [state, setState] = useState('')\n  const [suggestions, setSuggestions] = useState([])\n  const [shouldSearch, setShouldSearch] = useState(false)\n\n  useEffect(() => {\n    const debouncedSearch = setTimeout(() => {\n      if (shouldSearch === false) return;\n      if (street1.length >= 3) {\n        client.send(new Lookup(street1))\n          .then(response => setSuggestions([...response.result]))\n          .catch(err => console.log(err))\n      }\n      else\n        setSuggestions([])\n    }, 200)\n    return () => clearTimeout(debouncedSearch)\n  }, [street1, shouldSearch])\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    axios({\n      method: 'POST',\n      url: `${pathName}/api/addresses/verify`,\n      headers: {\n        'content-type': 'application/json'\n      },\n      data: {\n        street: street1,\n        secondary: street2,\n        lastLine: `${city} ${state}`\n      }\n    })\n      .then(res => res.data.lookups.map(lookup => lookup.result[0]))\n      .then(address => {\n        if (address.length > 0) {\n          console.log('address ', address[0])\n          submitForConfirmation(address[0])\n        }\n        else\n          console.log('invalid address')\n      })\n      .catch(err => console.log(err))\n  }\n  \n  const handleAutoComplete = e => {\n    setStreet1(e.target.value)\n    setShouldSearch(true)\n  }\n\n  return (\n    <div style={{ width: '500px', margin: '150px auto' }}>\n      <form style={{width: '100%'}} onSubmit={handleSubmit}>\n          <TextField\n            label='Street 1'\n            required\n            fullWidth\n            value={street1}\n            onChange={handleAutoComplete} />\n          <br />\n        {\n          suggestions.length > 0 && (\n            <List style={{ width: '100%', listStyle: 'none', border: '2px solid #ccc', borderRadius: '5px' }}>\n              {suggestions.map((suggestion, index) => {\n                const setAddress = () => {\n                  setStreet1(suggestion.streetLine)\n                  setCity(suggestion.city)\n                  setState(suggestion.state)\n                  setShouldSearch(false)\n                  setSuggestions([])\n                }\n                return (\n                  <ListItem style={{ width: '100%' }} button key={index} onClick={setAddress}>\n                    {suggestion.text}\n                  </ListItem>\n                )\n              })}\n            </List>\n          )\n        }\n        <TextField fullWidth label='Apt/Suite' value={street2} onChange={e => setStreet2(e.target.value)} /> <br />\n        <TextField fullWidth label='City' required value={city} onChange={e => setCity(e.target.value)} /> <br />\n        <TextField fullWidth label='State' required value={state} style={{ marginBottom: '2rem' }} onChange={e => setState(e.target.value)} /> <br />\n        <Button variant='contained' style={{ marginRight: '20px' }} onClick={() => goToDashboard()}>Cancel</Button>\n        <Button variant='contained' onClick={handleSubmit} color='primary'>Submit</Button>\n      </form>\n    </div>\n  )\n}\n\nexport default AddressLookup","import React from 'react'\nimport axios from 'axios'\nimport { Button, Typography } from \"@material-ui/core\";\nimport { pathName } from \"../pathname\";\n\nconst AddressConfirmation = ({ address, goBack, apiEndpoint, goToDashboard, addressID }) => {\n  const userID = JSON.parse(sessionStorage.getItem('user')).id\n\n  const handleConfirm = () => {\n    axios({\n      method: 'POST',\n      url: `${pathName}/api/addresses/${apiEndpoint}`,\n      headers: {\n        'content-type': 'application/json'\n      },\n      data: { ...address.components, deliveryLine1: address.deliveryLine1, lastLine: address.lastLine, userID, addressID: addressID }\n    })\n      .then(res => {\n        console.log(res)\n        goToDashboard()\n      })\n      .catch(err => console.log('oh noes an error! => ', err))\n  }\n\n  return (\n    <div style={{ border: '2px solid #ccc', borderRadius: '5px', padding: '25px' }}>\n      <Typography component='h1' variant='h6' style={{ marginBottom: '1rem' }}>Is this correct?</Typography>\n      <Typography component='p' variant='h5' >{address.deliveryLine1}</Typography>\n      <Typography component='p' variant='h5' style={{ marginBottom: '2rem' }}>{address.lastLine}</Typography>\n      <Button variant='contained' style={{ marginRight: '20px' }} onClick={goBack}>Back</Button>\n      <Button variant='contained' color='primary' onClick={handleConfirm}>Confirm</Button>\n    </div>\n  )\n}\n\nexport default AddressConfirmation","import React, { useState } from 'react'\nimport AddressLookup from \"./AddressLookup\";\nimport AddressConfirmation from './AddressConfirmation'\n\nconst AddressServiceElement = ({ addressID, apiEndpoint, goToDashboard }) => {\n  const [addressToBeConfirmed, setAddressToBeConfirmed] = useState({})\n  const [readyForConfirmation, setReadyForConfirmation] = useState(false)\n  const makeReadyForConfirmation = state => {\n    setAddressToBeConfirmed(state)\n    setReadyForConfirmation(true)\n  }\n\n  console.log(addressID)\n  return (\n    <div style={{ margin: '200px auto 0', maxWidth: '500px' }}>\n      {\n        !readyForConfirmation ?\n          <AddressLookup goToDashboard={goToDashboard} submitForConfirmation={makeReadyForConfirmation}/>\n          :\n          <AddressConfirmation\n            address={addressToBeConfirmed}\n            goBack={() => setReadyForConfirmation(false)}\n            apiEndpoint={apiEndpoint}\n            goToDashboard={goToDashboard}\n            addressID={addressID}\n          />\n      }\n    </div>\n  )\n}\n\nexport default AddressServiceElement","import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport AddressServiceElement from './AddressServiceElement'\nimport { Button } from \"@material-ui/core\";\nimport { pathName } from \"../pathname\";\n\n/**\n * @DELETE_EVERYTHING\n * MAKE A REAL DASHBOARD COMPONENT\n * \n * on page load, go get the addresses and store them in a state variable. (GET /api/addresses) => [addresses, setAddresses]\n * keep track of various modes: view, create, edit\n * @VIEW\n * show all the addresses for the user, each with an edit button and delete button.\n * show an ADD button below them.\n * Edit button toggles edit mode\n * \n * @EDIT\n * show the address form with method set to 'update'\n * on successful edit, change mode to 'view'\n * \n * @CREATE\n * show the address form with method set to 'add'\n * on successful add, change mode to 'view'\n */\n\nconst AddressList = ({ setAddressID, loadEditForm, loadAddForm }) => {\n  const [addresses, setAddresses] = useState([])\n  const userID = JSON.parse(sessionStorage.getItem('user')).id\n  const fetchAddresses = () => {\n    axios.get(`${pathName}/api/addresses/${userID}`)\n      .then(res => res.data)\n      .then(list => setAddresses(list))\n      .catch(err => console.log(err))\n  }\n\n  useEffect(fetchAddresses, [])\n\n  const handleDelete = (addressID) => {\n    axios({\n      method: 'DELETE',\n      url: `${pathName}/api/addresses`,\n      headers: {\n        'content-type': 'application/json'\n      },\n      data: {\n        addressID: addressID,\n        userID: userID\n      }\n    })\n      .then(res => fetchAddresses())\n    .catch(err => console.log(err))\n  }\n\n  return (\n    <div style={{ padding: '2rem' }}>\n      <h1>Your Addresses</h1>\n      <Button variant='contained' color='primary' onClick={loadAddForm}>Add</Button>\n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))' }}>\n        {\n          addresses.map(address => {\n            return (\n              <div key={address.id}>\n                <h2>#{address.id}</h2>\n                <p>{address.delivery_line}</p>\n                <p>{address.last_line}</p>\n                <Button variant='outlined' color='primary' style={{ margin: '0 20px 0 0' }} onClick={() => { setAddressID(address.id); loadEditForm()} }>Edit</Button>\n                <Button variant='outlined' color='secondary' onClick={() => handleDelete(address.id)}>Delete</Button>\n              </div>\n            )\n          })\n        }\n      </div>\n    </div>\n  )\n}\n\nconst Dashboard = (props) => {\n  const [mode, setMode] = useState('view')\n  const [selectedAddress, setSelectedAddress] = useState(null)\n\n  return (\n    <div>\n      {\n        mode === 'view' ?\n          <AddressList setAddressID={setSelectedAddress} loadEditForm={() => setMode('update')} loadAddForm={() => setMode('add')} />\n          :\n          <AddressServiceElement addressID={selectedAddress} apiEndpoint={mode} goToDashboard={() => setMode('view')} />\n      }\n    </div>\n  )\n}\n\nexport default Dashboard","import React from 'react';\n\nconst Home = (props) => {\n  return (\n    <div style={{ padding: '8rem 3rem 0', width: '55%', margin: '0 auto', textAlign: 'center' }}>\n      <h1>Have an address management problem?<br/>It's time to AddressIt.</h1>\n    </div>\n  )\n}\n\nexport default Home","export const checkAuth = () => JSON.parse(window.sessionStorage.getItem('loggedIn')) === true","import React, { useState } from 'react';\nimport { Button, TextField, Typography } from \"@material-ui/core\";\nimport { checkAuth } from '../auth';\nimport { Redirect, Link } from 'react-router-dom';\nimport axios from 'axios'\nimport { pathName } from \"../pathname\";\n\n// on successful response, redirect to Dashboard\n// on unsuccessful response, tell user to try again.\n\nconst Login = ({ history }) => {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const handleSubmit = e => {\n    e.preventDefault()\n    axios({\n      method: 'POST',\n      url: `${pathName}/api/user/login`,\n      headers: { 'content-type': 'application/json' },\n      data: {\n        email: email,\n        password: password\n      }\n    })\n      .then(res => {\n        sessionStorage.setItem('loggedIn', true)\n        sessionStorage.setItem('user', JSON.stringify({ email: res.data.email, id: res.data.id }))\n        history.push('/dashboard')\n      })\n      .catch((err) => console.log(err))\n  }\n  \n  return (\n    checkAuth() ? (\n      <Redirect to='/dashboard' />\n    ) : (\n      <form onSubmit={handleSubmit} style={{ width: '350px', margin: '150px auto' }}>\n        <Typography component='h1' variant='h5' align='center'>Log In</Typography>\n        <TextField    \n          type='email'\n          label='email'\n          required\n          fullWidth\n          onChange={e => setEmail(e.target.value)}\n          value={email}\n        />\n        <br/>\n        <TextField\n          type='password'\n          label='password'\n          required\n          fullWidth\n          style={{ marginBottom: '1.5rem' }}\n          onChange={e => setPassword(e.target.value)}\n          value={password}\n        />\n        <br/>\n        <Button variant='contained' color='primary' fullWidth type='submit'>Submit</Button>\n        <Link to='/register' style={{textAlign:'center'}}><p>\n          or create an account\n        </p></Link>\n      </form>\n    )\n  )\n}\n\nexport default Login","import React from 'react';\nimport { Link, useHistory } from \"react-router-dom\";\nimport { AppBar, Button, Toolbar, Typography } from \"@material-ui/core\";\nimport { checkAuth } from \"../auth\";\n\nconst Navigation = () => {\n  const history = useHistory()\n  const logOut = () => {\n    window.sessionStorage.clear()\n    history.push('/')\n  }\n\n  return (\n    <AppBar position='relative'>\n      <Toolbar>\n        <Typography variant='h6' style={{ flexGrow: 1 }}>\n          AddressIt\n        </Typography>\n        {\n          checkAuth() ? (\n            <>\n              <Button component={Link} to='/dashboard' color='inherit'>Dashboard</Button>\n              <Button color='inherit' onClick={logOut}>Sign Out</Button>\n            </>\n          ) : ( history.location.pathname !== '/login' &&\n            <Button component={Link} to='/login' color='inherit'>Sign In</Button>\n          )\n        }\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nexport default Navigation","import React from 'react';\n\nconst NotFound = () => {\n  return <h1>404 Not Found</h1>\n}\n\nexport default NotFound","import React, { useState } from 'react';\nimport { Button, TextField, Typography } from \"@material-ui/core\";\nimport axios from 'axios'\nimport { pathName } from \"../pathname\";\n\n// on successful response, redirect to Dashboard\n// on unsuccessful response, tell user to try again.\n\nconst Register = ({ history }) => {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const handleSubmit = e => {\n    e.preventDefault()\n    axios({\n      method: 'POST',\n      url: `${pathName}/api/user/register`,\n      headers: { 'content-type': 'application/json' },\n      data: {\n        email: email,\n        password: password\n      }\n    })\n      .then(res => history.push('/login'))\n      .catch((err) => console.log(err))\n  }\n\n  return (\n    <form onSubmit={handleSubmit} style={{ width: '350px', margin: '150px auto' }}>\n      <Typography component='h1' variant='h5' align='center'>Register</Typography>\n      <TextField\n        type='email'\n        label='email'\n        required\n        fullWidth\n        onChange={e => setEmail(e.target.value)}\n        value={email}\n      />\n      <br />\n      <TextField\n        type='password'\n        label='password'\n        required\n        fullWidth\n        style={{ marginBottom: '1.5rem' }}\n        onChange={e => setPassword(e.target.value)}\n        value={password}\n      />\n      <br />\n      <Button variant='contained' color='primary' fullWidth type='submit'>Submit</Button>\n    </form>\n  )\n}\n\nexport default Register","import React from 'react';\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport { Dashboard, Home, Login, NotFound, Register } from \"./components\";\nimport { checkAuth } from \"./auth\";\n\nconst ProtectedRoute = ({ component: Component, ...rest }) => {\n  return (\n    <Route {...rest} render={props => checkAuth() ? (\n      <Component {...props} />\n    ) : (\n        <Redirect to=\"/login\" />\n      )}\n    />\n  )\n}\n\nconst Router = () => {\n  return (\n    <Switch>\n      <ProtectedRoute exact path='/dashboard' component={Dashboard}/>\n      <Route exact path='/login' component={Login}/>\n      <Route exact path='/register' component={Register}/>\n      <Route exact path='/' component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  )\n}\n\nexport default Router","import React from 'react';\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Navigation } from \"./components\";\nimport Router from './Router'\nimport './App.css'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Navigation />\n      <Router />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}